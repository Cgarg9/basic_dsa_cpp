class Solution{
private:
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, 1, 0, -1};
    vector<char> v = {'U', 'R', 'D', 'L'};
private:
    bool CheckIfValidPath(int x, int y, int n, vector<vector<int>>& visited, vector<vector<int>>& matrix){
        if(x >= 0 && x < n && y >= 0 && y < n && !visited[x][y] && matrix[x][y] == 1){
            return true;
        }
        return false;
    }
private:
    void FindPaths(int x, int y, int n, string s, vector<string>&ans, vector<vector<int>>&visited, vector<vector<int>>& matrix){
        if(x == n - 1 && y == n - 1){
            ans.push_back(s);
            return;
        }
        for(int i = 0; i < 4; i++){
            int newx = x + dx[i];
            int newy = y + dy[i];
            if(CheckIfValidPath(newx, newy, n, visited, matrix)){
                visited[newx][newy] = 1;
                s += v[i];
                FindPaths(newx, newy, n, s, ans, visited, matrix);
                s.pop_back();
                visited[newx][newy] = 0;
            }
        }
        
    }
public:
    vector<string> findPath(vector<vector<int>> &matrix, int n) {
        vector<string> ans;
        if(matrix[0][0] != 1){
            return {}; // mf can't event start
        }
        vector<vector<int>> visited(n, vector<int>(n, 0));
        visited[0][0] = 1;
        FindPaths(0, 0, n, "", ans, visited, matrix);
        return ans;
        
    }   
};
