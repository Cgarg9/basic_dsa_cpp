Q 51 leetcode

class Solution {
private:
    bool isSafe( int n, vector<string>nQueens, int row, int col ){
        // check row
        for( int i = 0; i < n; i++ ){
            if( nQueens[i][col] == 'Q' ){
                return false;
            }
        }
        // check primary diagonal
        for( int i = row-1, j = col-1; i >= 0 && j >= 0; i--, j-- ){
            if( nQueens[i][j] == 'Q' ){
                return false;
            }
        }
        // check other diagonal
        for( int i = row-1, j = col+1; i >= 0 && j < n; i--, j++ ){
            if( nQueens[i][j] == 'Q' ){
                return false;
            }
        }
        return true;
    }
    void solve(int n, vector<vector<string>>&output,vector<string>&nQueens, int row){
        if( row == n ){
            output.push_back(nQueens);
            return;
        }
        for( int col = 0; col < n; col++ ){
            if( isSafe(n,nQueens,row,col) ){
                // place queen
                nQueens[row][col] = 'Q';
                solve(n,output,nQueens,row+1);
                // backtrack
                nQueens[row][col] = '.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>output;
        vector<string> nQueens(n,string(n,'.'));
        solve(n,output,nQueens,0);
        return output;
    }
};
