Recursive
class Solution {
private:
    int solve(string t1, string t2, int i, int j) {
        if (i >= t1.length() || j >= t2.length()) {
            return 0;
        }
        int ans = 0;
        if (t1[i] == t2[j]) {
            ans = 1 + solve(t1, t2, i+1, j+1);
        }
        else {
            ans = max(solve(t1, t2, i+1, j), solve(t1, t2, i, j+1));
        }
        return ans;
    }
public:
    int longestCommonSubsequence(string t1, string t2) {
        return solve(t1, t2, 0, 0);
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Memoisation
class Solution {
private:
    int solve(string t1, string t2, int i, int j, vector<vector<int>>& dp) {
        if (i >= t1.length() || j >= t2.length()) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int ans = 0;
        if (t1[i] == t2[j]) {
            ans = 1 + solve(t1, t2, i+1, j+1, dp);
        }
        else {
            ans = max(solve(t1, t2, i+1, j, dp), solve(t1, t2, i, j+1, dp));
        }
        return dp[i][j] = ans;
    }
public:
    int longestCommonSubsequence(string t1, string t2) {
        int n = t1.length();
        int m = t2.length();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        return solve(t1, t2, 0, 0, dp);
    }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------
Tabulation
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();

        vector<vector<int>>dp(n+1,vector<int>(m+1,0));

        for( int i = 1; i <= n; i++ ){
            for( int j = 1; j <= m; j++ ){
                if( text1[i-1] == text2[j-1] ){
                    dp[i][j] = (1 + dp[i-1][j-1]);
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }

        return dp[n][m];
    }
};
