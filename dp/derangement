RECURSIVE 
T.C. O(2^N)
S.C. O(N) recursion call stack
#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define ll long long int
int derangementRecursive(int n)
{
    if (n == 1)
    {
        return 0;
    }
    if (n == 2)
    {
        return 1;
    }
    return (n - 1) * (derangementRecursive(n - 1) + derangementRecursive(n - 2));
}
int main()
{
    int n;
    cin >> n;
    cout << derangementRecursive(n);
    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Memoisation Top down
T.C. O(N)
S.C. O(N+N) vector + recursion call stack
#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define ll long long int
int derangementMemo(int n, vector<int> &dp)
{
    if (n == 1)
    {
        return 0;
    }
    if (n == 2)
    {
        return 1;
    }
    if (dp[n] != -1)
    {
        return dp[n];
    }
    dp[n] = (n - 1) * (derangementMemo(n - 1, dp) + derangementMemo(n - 2, dp));
    
    return dp[n];
}
int main()
{
    int n;
    cin >> n;
    vector<int> dp(n + 1, -1);
    cout << derangementMemo(n, dp);
    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
Tabulation Bottom up
T.C. O(N)
S.C. O(N) vector
#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define ll long long int
int derangementTab(int n)
{
    vector<int> dp(n + 1);
    dp[1] = 0;
    dp[2] = 1;

    for (int i = 3; i <= n; i++)
    {
        dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]);
    }
    return dp[n];
}
int main()
{
    int n;
    cin >> n;
    cout << derangementTab(n);
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
Space optimisation
T.C. O(N)
S.C. O(1)  
#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define ll long long int
int derangementTabOptimised(int n)
{
    if (n == 1)
    {
        return 0;
    }
    int prev2 = 0;
    int prev1 = 1;

    for (int i = 3; i <= n; i++)
    {
        int curr;
        curr = (i - 1) * (prev1 + prev2);
        prev2 = prev1;
        prev1 = curr;
    }
    return prev1;
}
int main()
{
    int n;
    cin >> n;
    cout << derangementTabOptimised(n);
    return 0;
}
