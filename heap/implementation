

#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define ll long long int
class Heap
{
public:
    vector<int> v;
    int size;
    Heap()
    {
        v.push_back(-1);
        size = 0;
    }

    void insert(int val)
    {
        size++;
        v.push_back(val);
        int index = size;
        while (index > 1)
        {
            int parent = index / 2;
            // max heap
            if (v[parent] < v[index])
            {
                swap(v[parent], v[index]);
                index = parent;
            }
            else
            {
                return;
            }
        }
    }
    void print()
    {
        for (int i = 0; i < v.size(); i++)
        {
            cout << v[i] << " ";
        }
        cout << endl;
    }

    void Delete()
    {
        if (size == 0)
        {
            return;
        }
        v[1] = v[size];
        size--;
        v.pop_back();

        // rearrange to make heap again
        int i = 1;
        while (i <= size)
        {
            int leftChild = 2 * i;
            int rightChild = 2 * i + 1;

            if (leftChild < size && v[leftChild] > v[i] && rightChild <= size && v[rightChild] < v[leftChild])
            {
                swap(v[i], v[leftChild]);
                i = leftChild;
            }
            else if (leftChild < size && v[rightChild] > v[i] && rightChild <= size && v[rightChild] > v[leftChild])
            {
                swap(v[i], v[rightChild]);
                i = rightChild;
            }
            else if (leftChild == size && rightChild > size && v[i] < v[leftChild])
            {
                swap(v[i], v[leftChild]);
                i = leftChild;
            }
            else
            {
                return;
            }
        }
    }
};

void heapify(vector<int> &v, int n, int i)
{
    int largest = i;
    int left = 2 * i;
    int right = 2 * i + 1;

    if (left < n && v[left] > v[largest])
    {
        largest = left;
    }
    if (right < n && v[right] > v[largest])
    {
        largest = right;
    }
    if (largest != i)
    {
        swap(v[largest], v[i]);
        heapify(v, n, largest);
    }
}

int main()
{
    // Heap h;
    // h.insert(1);
    // h.insert(2);
    // h.insert(6);
    // h.insert(5);
    // h.insert(58);
    // h.insert(100);
    // h.insert(10);
    // h.insert(92);
    // h.print();
    // h.Delete();
    // h.print();
    vector<int> v = {-1, 2, 5, 8, 10, 1, 7, 19};
    for (int i = v.size() / 2; i > 0; i--)
    {

        heapify(v, v.size(), i);
    }
    for (int i = 0; i < v.size(); i++)
    {
        cout << v[i] << " ";
    }
    return 0;
}
