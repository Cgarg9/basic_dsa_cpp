
Given a Binary Search Tree. Convert a given BST into a Special Max Heap with the condition that all the values in the left subtree of a node should be less than 
all the values in the right subtree of the node. This condition is applied on all the nodes in the so converted Max Heap.
Node < left && Node < right && right < left => N < L < R --- preorder

Note : The driver code prints the postorder traversal of the converted BST. due to this line we make tree using postorder..


class Solution{
private:
    void inorder(Node* root, vector<int>& v) {
        if (root == NULL) {
            return;
        }
        inorder(root->left, v);
        v.push_back(root->data);
        inorder(root->right, v);
    }
    void makePreorder(Node* root, int& i, vector<int>& v) {
        if (root == NULL || i >= v.size()) {
            return;
        }
        makePreorder(root->left, i, v);
        makePreorder(root->right, i, v);
        root->data = v[i++];
    }
  public:
    void convertToMaxHeapUtil(Node* root)
    {
        vector<int> dfs;
        inorder(root, dfs);
        int index = 0;
        makePreorder(root, index, dfs);
    }    
};
