T.C : O(N*2) due to height function

class Solution{
    private:
    int height(Node* root){
        
        if( root == NULL ){
            return 0;
        }
        
        int left = height(root->left);
        int right = height(root->right);
        
        return max(left,right) + 1;
    }
    public:
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        if( root == NULL ){
            return true;
        }
        
        bool left = isBalanced(root->left);
        bool right = isBalanced(root->right);
        
        bool diff = abs(height(root->left) - height(root->right)) <= 1;
        
        if( left && right && diff ){
            return true;
        }
        
        return false;
    }
};

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
T.C : O(N)

    public:
    pair<bool,int> solve(Node* root){
        
        if( root == NULL ){
            pair<bool,int> p = {true,0};
            // p.first tell whether it is balanced or not
            // p.second gives curr height
            return p;
        }
        
        pair<bool,int> left = solve(root->left);
        pair<bool,int> right = solve(root->right);
        
        bool diff = abs(left.second - right.second) <= 1;
        
        pair<bool,int> ans;
        ans.second = max(left.second,right.second) + 1;
        // updating height.
        
        if( left.first && right.first && diff ){
            ans.first = true;
        }
        else{
            ans.second = false;
        }
        
        return ans;
    }
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        return solve(root).first;
    }
};
