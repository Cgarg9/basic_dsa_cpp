using set
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        vector<int> ans(V, INT_MAX);
        ans[S] = 0;
        set<pair<int, int>> s;
        s.insert({0, S});
        // dist, node
        while (!s.empty()) {
            auto top = *(s.begin());
            int nodeDist = top.first;
            int node = top.second;
            
            s.erase(s.begin());
            
            for (auto neighbour : adj[node]) {
                if (nodeDist + neighbour[1] < ans[neighbour[0]]) {
                    
                    auto record = s.find({ans[neighbour[0]], neighbour[0]});
                    if (record != s.end()) {
                        s.erase(record);
                    }
                    ans[neighbour[0]] = nodeDist + neighbour[1];
                    s.insert({ans[neighbour[0]], neighbour[0]});
                }
            }
        }
        return ans;
    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------
  min heap

#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define endl '\n'
void dijkstra(vector<pair<int, int>> adjList[], vector<int> &dist, int src)
{
    dist[src] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    // weight, vertex
    pq.push({0, src});
    while (!pq.empty())
    {
        int wt = pq.top().first;
        int u = pq.top().second;
        pq.pop();
        for (auto node : adjList[u])
        {
            int v = node.first;
            int edgeWeight = node.second;
            if (dist[v] > wt + edgeWeight)
            {
                dist[v] = wt + edgeWeight;
                pq.push({wt + edgeWeight, v});
            }
        }
    }
}
int main()
{
    int n, m, src;
    cin >> n >> m >> src;
    vector<pair<int, int>> adjList[n];
    for (int i = 0; i < m; i++)
    {
        int u, v, w;
        cin >> u >> v >> w;
        adjList[u].push_back({v, w});
        // adjList[v].push_back({u, w});
    }
    vector<int> dist(n, INT_MAX);
    dijkstra(adjList, dist, src);
    for (int i = 0; i < dist.size(); i++)
    {
        cout << dist[i] << endl;
    }
    return 0;
}
